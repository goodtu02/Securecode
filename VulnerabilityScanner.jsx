import React, { useState } from 'react';
import { Shield, Code, AlertTriangle, CheckCircle, Send, Copy, Download } from 'lucide-react';

export default function VulnerabilityScanner() {
  const [code, setCode] = useState('');
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState(null);
  const [activeTab, setActiveTab] = useState('vulnerabilities');

  const handleSubmit = async () => {
    if (!code.trim()) return;

    setLoading(true);
    try {
      // 여기에 실제 API 엔드포인트를 설정하세요
      const response = await fetch('https://n8ncloud12.app.n8n.cloud/webhook/front/input', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ code }),
      });
      
      if (!response.ok) {
        throw new Error('스캔 중 오류가 발생했습니다.');
      }
      
      const data = await response.json();
      setResult(data);
    } catch (error) {
      // 데모용 mock 데이터
      setTimeout(() => {
        setResult({
          vulnerabilities: [
            {
              id: 1,
              type: 'SQL Injection',
              severity: 'High',
              line: 15,
              description: 'SQL 쿼리에 사용자 입력이 직접 포함되어 SQL 인젝션 공격에 취약합니다.',
              recommendation: 'Prepared Statement나 Parameterized Query를 사용하세요.'
            },
            {
              id: 2,
              type: 'XSS Vulnerability',
              severity: 'Medium',
              line: 8,
              description: '사용자 입력이 sanitize되지 않고 직접 DOM에 삽입됩니다.',
              recommendation: 'HTML 엔티티 인코딩이나 DOMPurify 라이브러리를 사용하세요.'
            }
          ],
          fixedCode: `// 수정된 코드 예시
const sanitizeInput = (input) => {
  return input.replace(/[<>]/g, '');
};

const getUserData = async (userId) => {
  const query = 'SELECT * FROM users WHERE id = ?';
  return await db.execute(query, [userId]);
};`,
          guide: {
            title: '보안 코딩 가이드',
            sections: [
              {
                title: 'SQL Injection 방지',
                content: 'Prepared Statement를 사용하여 SQL 쿼리와 데이터를 분리하고, 사용자 입력을 직접 쿼리에 포함하지 마세요.'
              },
              {
                title: 'XSS 공격 방지',
                content: '사용자 입력을 DOM에 삽입하기 전에 항상 sanitize하고, Content Security Policy(CSP)를 적용하세요.'
              }
            ]
          }
        });
        setLoading(false);
      }, 2000);
    }
  };

  const copyToClipboard = (text) => {
    navigator.clipboard.writeText(text);
  };

  const downloadReport = () => {
    const report = `코드 취약점 진단 보고서\n\n${result.vulnerabilities.map(v => `${v.type} (Line ${v.line}): ${v.description}`).join('\n')}`;
    const blob = new Blob([report], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'vulnerability-report.txt';
    a.click();
  };

  const getSeverityColor = (severity) => {
    switch (severity) {
      case 'High': return 'text-red-600 bg-red-100';
      case 'Medium': return 'text-yellow-600 bg-yellow-100';
      case 'Low': return 'text-green-600 bg-green-100';
      default: return 'text-gray-600 bg-gray-100';
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900">
      {/* Header */}
      <div className="bg-black/20 backdrop-blur-sm border-b border-white/10">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <div className="flex items-center space-x-3">
            <div className="p-2 bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg">
              <Shield className="w-8 h-8 text-white" />
            </div>
            <div>
              <h1 className="text-3xl font-bold text-white">SecureCode</h1>
              <p className="text-blue-200">AI 기반 코드 취약점 진단 서비스</p>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="grid grid-cols-1 xl:grid-cols-2 gap-8">
          {/* Input Section */}
          <div className="space-y-6">
            <div className="bg-white/10 backdrop-blur-md rounded-2xl p-6 border border-white/20 shadow-2xl">
              <div className="flex items-center space-x-3 mb-6">
                <Code className="w-6 h-6 text-blue-400" />
                <h2 className="text-xl font-semibold text-white">코드 입력</h2>
              </div>
              
              <div className="space-y-4">
                <div>
                  <textarea
                    value={code}
                    onChange={(e) => setCode(e.target.value)}
                    placeholder="취약점을 진단할 코드를 입력하세요..."
                    className="w-full h-80 bg-slate-800/50 border border-slate-600 rounded-xl p-4 text-white font-mono text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
                    style={{ fontFamily: 'Monaco, Consolas, "Lucida Console", monospace' }}
                  />
                </div>
                
                <button
                  onClick={handleSubmit}
                  disabled={!code.trim() || loading}
                  className="w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 disabled:from-gray-600 disabled:to-gray-700 disabled:cursor-not-allowed text-white font-medium py-4 px-6 rounded-xl flex items-center justify-center space-x-2 transition-all duration-200 transform hover:scale-[1.02]"
                >
                  {loading ? (
                    <>
                      <div className="w-5 h-5 border-2 border-white/30 border-t-white rounded-full animate-spin" />
                      <span>진단 중...</span>
                    </>
                  ) : (
                    <>
                      <Send className="w-5 h-5" />
                      <span>취약점 진단 시작</span>
                    </>
                  )}
                </button>
              </div>
            </div>

            {/* Features */}
            <div className="bg-white/5 backdrop-blur-sm rounded-2xl p-6 border border-white/10">
              <h3 className="text-lg font-semibold text-white mb-4">주요 기능</h3>
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                <div className="flex items-start space-x-3">
                  <div className="w-8 h-8 bg-blue-500/20 rounded-lg flex items-center justify-center">
                    <Shield className="w-4 h-4 text-blue-400" />
                  </div>
                  <div>
                    <h4 className="font-medium text-white">실시간 취약점 분석</h4>
                    <p className="text-sm text-gray-300">OWASP Top 10 기반 보안 취약점 검사</p>
                  </div>
                </div>
                <div className="flex items-start space-x-3">
                  <div className="w-8 h-8 bg-purple-500/20 rounded-lg flex items-center justify-center">
                    <Code className="w-4 h-4 text-purple-400" />
                  </div>
                  <div>
                    <h4 className="font-medium text-white">자동 코드 수정</h4>
                    <p className="text-sm text-gray-300">AI가 제안하는 보안 강화 코드</p>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Results Section */}
          <div className="space-y-6">
            {result ? (
              <div className="bg-white/10 backdrop-blur-md rounded-2xl border border-white/20 shadow-2xl overflow-hidden">
                {/* Tabs */}
                <div className="flex border-b border-white/20">
                  <button
                    onClick={() => setActiveTab('vulnerabilities')}
                    className={`flex-1 py-4 px-6 text-sm font-medium transition-colors ${
                      activeTab === 'vulnerabilities'
                        ? 'text-white bg-white/10'
                        : 'text-gray-300 hover:text-white hover:bg-white/5'
                    }`}
                  >
                    <div className="flex items-center justify-center space-x-2">
                      <AlertTriangle className="w-4 h-4" />
                      <span>취약점 ({result.vulnerabilities.length})</span>
                    </div>
                  </button>
                  <button
                    onClick={() => setActiveTab('fixed')}
                    className={`flex-1 py-4 px-6 text-sm font-medium transition-colors ${
                      activeTab === 'fixed'
                        ? 'text-white bg-white/10'
                        : 'text-gray-300 hover:text-white hover:bg-white/5'
                    }`}
                  >
                    <div className="flex items-center justify-center space-x-2">
                      <CheckCircle className="w-4 h-4" />
                      <span>수정 코드</span>
                    </div>
                  </button>
                  <button
                    onClick={() => setActiveTab('guide')}
                    className={`flex-1 py-4 px-6 text-sm font-medium transition-colors ${
                      activeTab === 'guide'
                        ? 'text-white bg-white/10'
                        : 'text-gray-300 hover:text-white hover:bg-white/5'
                    }`}
                  >
                    <div className="flex items-center justify-center space-x-2">
                      <Code className="w-4 h-4" />
                      <span>가이드</span>
                    </div>
                  </button>
                </div>

                <div className="p-6">
                  {activeTab === 'vulnerabilities' && (
                    <div className="space-y-4">
                      <div className="flex justify-between items-center">
                        <h3 className="text-lg font-semibold text-white">발견된 취약점</h3>
                        <button
                          onClick={downloadReport}
                          className="flex items-center space-x-2 bg-slate-700 hover:bg-slate-600 text-white px-3 py-2 rounded-lg text-sm transition-colors"
                        >
                          <Download className="w-4 h-4" />
                          <span>보고서 다운로드</span>
                        </button>
                      </div>
                      {result.vulnerabilities.map((vuln) => (
                        <div key={vuln.id} className="bg-slate-800/50 rounded-xl p-4 border border-slate-600">
                          <div className="flex items-start justify-between mb-2">
                            <div className="flex items-center space-x-2">
                              <h4 className="font-medium text-white">{vuln.type}</h4>
                              <span className={`px-2 py-1 rounded-full text-xs font-medium ${getSeverityColor(vuln.severity)}`}>
                                {vuln.severity}
                              </span>
                            </div>
                            <span className="text-sm text-gray-400">Line {vuln.line}</span>
                          </div>
                          <p className="text-gray-300 text-sm mb-2">{vuln.description}</p>
                          <p className="text-blue-300 text-sm">💡 {vuln.recommendation}</p>
                        </div>
                      ))}
                    </div>
                  )}

                  {activeTab === 'fixed' && (
                    <div className="space-y-4">
                      <div className="flex justify-between items-center">
                        <h3 className="text-lg font-semibold text-white">수정된 코드</h3>
                        <button
                          onClick={() => copyToClipboard(result.fixedCode)}
                          className="flex items-center space-x-2 bg-slate-700 hover:bg-slate-600 text-white px-3 py-2 rounded-lg text-sm transition-colors"
                        >
                          <Copy className="w-4 h-4" />
                          <span>복사</span>
                        </button>
                      </div>
                      <div className="bg-slate-800/50 rounded-xl p-4 border border-slate-600">
                        <pre className="text-sm text-gray-300 font-mono overflow-x-auto">
                          {result.fixedCode}
                        </pre>
                      </div>
                    </div>
                  )}

                  {activeTab === 'guide' && (
                    <div className="space-y-4">
                      <h3 className="text-lg font-semibold text-white">{result.guide.title}</h3>
                      {result.guide.sections.map((section, index) => (
                        <div key={index} className="bg-slate-800/50 rounded-xl p-4 border border-slate-600">
                          <h4 className="font-medium text-white mb-2">{section.title}</h4>
                          <p className="text-gray-300 text-sm">{section.content}</p>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              </div>
            ) : (
              <div className="bg-white/5 backdrop-blur-sm rounded-2xl p-12 border border-white/10 text-center">
                <Shield className="w-16 h-16 text-gray-400 mx-auto mb-4" />
                <h3 className="text-xl font-semibold text-white mb-2">진단 결과를 기다리는 중</h3>
                <p className="text-gray-300">코드를 입력하고 진단을 시작하세요</p>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}