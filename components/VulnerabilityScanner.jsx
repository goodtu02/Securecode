
import React, { useState } from 'react';
import { Shield, Code, AlertTriangle, CheckCircle, Send, Copy, Download, Zap, Eye, FileText, Settings } from 'lucide-react';

export default function VulnerabilityScanner() {
  const [code, setCode] = useState('');
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState(null);
  const [activeTab, setActiveTab] = useState('vulnerabilities');

  const handleSubmit = async () => {
    if (!code.trim()) return;

    setLoading(true);
    try {
      const response = await fetch('/api/scan-vulnerability', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ code }),
      });
      
      if (!response.ok) {
        throw new Error('스캔 중 오류가 발생했습니다.');
      }
      
      const data = await response.json();
      setResult(data);
      setLoading(false);
    } catch (error) {
      // 데모용 mock 데이터
      setTimeout(() => {
        setResult({
          vulnerabilities: [
            {
              id: 1,
              type: 'SQL Injection',
              severity: 'Critical',
              line: 15,
              description: 'SQL 쿼리에 사용자 입력이 직접 포함되어 SQL 인젝션 공격에 취약합니다.',
              recommendation: 'Prepared Statement나 Parameterized Query를 사용하세요.',
              cwe: 'CWE-89'
            },
            {
              id: 2,
              type: 'Cross-Site Scripting (XSS)',
              severity: 'High',
              line: 8,
              description: '사용자 입력이 sanitize되지 않고 직접 DOM에 삽입됩니다.',
              recommendation: 'HTML 엔티티 인코딩이나 DOMPurify 라이브러리를 사용하세요.',
              cwe: 'CWE-79'
            },
            {
              id: 3,
              type: 'Insecure Direct Object Reference',
              severity: 'Medium',
              line: 23,
              description: '적절한 권한 검사 없이 객체에 직접 접근합니다.',
              recommendation: '사용자 권한을 검증하고 접근 제어를 구현하세요.',
              cwe: 'CWE-639'
            }
          ],
          fixedCode: `// 수정된 코드 예시
const sanitizeInput = (input) => {
  return input
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#x27;')
    .replace(/\//g, '&#x2F;');
};

const getUserData = async (userId, currentUser) => {
  // 권한 검증
  if (!currentUser.hasAccess(userId)) {
    throw new Error('Unauthorized access');
  }
  
  // Prepared statement 사용
  const query = 'SELECT * FROM users WHERE id = ? AND tenant_id = ?';
  return await db.execute(query, [userId, currentUser.tenantId]);
};`,
          guide: {
            title: '보안 코딩 가이드라인',
            sections: [
              {
                title: 'Input Validation & Sanitization',
                content: '모든 사용자 입력을 검증하고 적절히 sanitize하여 injection 공격을 방지하세요.',
                priority: 'Critical'
              },
              {
                title: 'Authentication & Authorization',
                content: '강력한 인증 시스템과 세분화된 권한 제어를 구현하여 무단 접근을 방지하세요.',
                priority: 'High'
              },
              {
                title: 'Secure Database Operations',
                content: 'Prepared Statement와 ORM을 활용하여 SQL injection을 방지하고 데이터 무결성을 보장하세요.',
                priority: 'High'
              }
            ]
          },
          stats: {
            totalIssues: 3,
            criticalIssues: 1,
            highIssues: 1,
            mediumIssues: 1,
            lowIssues: 0,
            securityScore: 65
          }
        });
        setLoading(false);
      }, 1800);
    }
  };

  const copyToClipboard = (text) => {
    navigator.clipboard.writeText(text);
  };

  const downloadReport = () => {
    const report = `SecureCode 취약점 진단 보고서
생성일: ${new Date().toLocaleDateString('ko-KR')}

보안 점수: ${result.stats.securityScore}/100

발견된 취약점:
${result.vulnerabilities.map(v => `• ${v.type} (${v.severity}) - Line ${v.line}
  설명: ${v.description}
  권장사항: ${v.recommendation}
  CWE: ${v.cwe}
`).join('\n')}

수정 코드:
${result.fixedCode}`;
    
    const blob = new Blob([report], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `security-report-${new Date().getTime()}.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  const getSeverityColor = (severity) => {
    switch (severity) {
      case 'Critical': return 'text-red-600 bg-red-50 border-red-200';
      case 'High': return 'text-orange-600 bg-orange-50 border-orange-200';
      case 'Medium': return 'text-yellow-600 bg-yellow-50 border-yellow-200';
      case 'Low': return 'text-blue-600 bg-blue-50 border-blue-200';
      default: return 'text-gray-600 bg-gray-50 border-gray-200';
    }
  };

  const getSecurityScoreColor = (score) => {
    if (score >= 90) return 'text-green-600';
    if (score >= 70) return 'text-yellow-600';
    return 'text-red-600';
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Navigation */}
      <nav className="bg-white border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center space-x-4">
              <div className="flex items-center space-x-3">
                <div className="w-8 h-8 bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg flex items-center justify-center">
                  <Shield className="w-5 h-5 text-white" />
                </div>
                <div>
                  <h1 className="text-xl font-semibold text-gray-900">SecureCode</h1>
                </div>
              </div>
            </div>
            <div className="flex items-center space-x-4">
              <button className="text-gray-500 hover:text-gray-700">
                <Settings className="w-5 h-5" />
              </button>
            </div>
          </div>
        </div>
      </nav>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="mb-8">
          <h2 className="text-2xl font-bold text-gray-900 mb-2">코드 보안 분석</h2>
          <p className="text-gray-600">AI 기반 취약점 분석으로 코드의 보안성을 향상시키세요</p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Input Section */}
          <div className="lg:col-span-2 space-y-6">
            <div className="bg-white rounded-xl border border-gray-200 shadow-sm">
              <div className="border-b border-gray-200 px-6 py-4">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-2">
                    <Code className="w-5 h-5 text-gray-500" />
                    <h3 className="text-lg font-medium text-gray-900">코드 입력</h3>
                  </div>
                  <div className="flex items-center space-x-2 text-sm text-gray-500">
                    <Eye className="w-4 h-4" />
                    <span>실시간 분석</span>
                  </div>
                </div>
              </div>
              
              <div className="p-6">
                <div className="mb-4">
                  <textarea
                    value={code}
                    onChange={(e) => setCode(e.target.value)}
                    placeholder="분석할 코드를 입력하거나 붙여넣으세요..."
                    className="w-full h-96 bg-gray-50 border border-gray-200 rounded-lg p-4 text-gray-900 font-mono text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 resize-none"
                    style={{ fontFamily: 'SF Mono, Monaco, Consolas, "Roboto Mono", monospace' }}
                  />
                </div>
                
                <div className="flex justify-between items-center">
                  <div className="text-sm text-gray-500">
                    {code.length} characters
                  </div>
                  <button
                    onClick={handleSubmit}
                    disabled={!code.trim() || loading}
                    className="inline-flex items-center px-4 py-2 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed text-white font-medium text-sm rounded-lg transition-colors duration-200 space-x-2"
                  >
                    {loading ? (
                      <>
                        <div className="w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin" />
                        <span>분석 중...</span>
                      </>
                    ) : (
                      <>
                        <Zap className="w-4 h-4" />
                        <span>취약점 분석</span>
                      </>
                    )}
                  </button>
                </div>
              </div>
            </div>

            {/* Quick Actions */}
            <div className="bg-white rounded-xl border border-gray-200 shadow-sm p-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4">빠른 시작</h3>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <button 
                  onClick={() => setCode('const user = req.query.user;\nconst sql = "SELECT * FROM users WHERE name = \'" + user + "\'";')}
                  className="text-left p-4 border border-gray-200 rounded-lg hover:border-blue-300 hover:bg-blue-50 transition-colors"
                >
                  <div className="font-medium text-gray-900 mb-1">SQL Injection 예제</div>
                  <div className="text-sm text-gray-500">취약한 SQL 쿼리 샘플</div>
                </button>
                <button 
                  onClick={() => setCode('document.getElementById("output").innerHTML = userInput;')}
                  className="text-left p-4 border border-gray-200 rounded-lg hover:border-blue-300 hover:bg-blue-50 transition-colors"
                >
                  <div className="font-medium text-gray-900 mb-1">XSS 예제</div>
                  <div className="text-sm text-gray-500">Cross-Site Scripting 샘플</div>
                </button>
                <button 
                  onClick={() => setCode('app.get("/user/:id", (req, res) => {\n  const user = users[req.params.id];\n  res.json(user);\n});')}
                  className="text-left p-4 border border-gray-200 rounded-lg hover:border-blue-300 hover:bg-blue-50 transition-colors"
                >
                  <div className="font-medium text-gray-900 mb-1">권한 검증 예제</div>
                  <div className="text-sm text-gray-500">부적절한 접근 제어 샘플</div>
                </button>
              </div>
            </div>
          </div>

          {/* Results Section */}
          <div className="space-y-6">
            {result ? (
              <>
                {/* Security Score */}
                <div className="bg-white rounded-xl border border-gray-200 shadow-sm p-6">
                  <h3 className="text-lg font-medium text-gray-900 mb-4">보안 점수</h3>
                  <div className="text-center">
                    <div className={`text-4xl font-bold ${getSecurityScoreColor(result.stats.securityScore)} mb-2`}>
                      {result.stats.securityScore}
                    </div>
                    <div className="text-gray-500 text-sm mb-4">/ 100</div>
                    <div className="w-full bg-gray-200 rounded-full h-2 mb-4">
                      <div 
                        className={`h-2 rounded-full ${result.stats.securityScore >= 70 ? 'bg-yellow-500' : 'bg-red-500'}`}
                        style={{ width: `${result.stats.securityScore}%` }}
                      ></div>
                    </div>
                  </div>
                  
                  <div className="grid grid-cols-2 gap-4 mt-6">
                    <div className="text-center">
                      <div className="text-2xl font-bold text-red-600">{result.stats.criticalIssues}</div>
                      <div className="text-sm text-gray-500">Critical</div>
                    </div>
                    <div className="text-center">
                      <div className="text-2xl font-bold text-orange-600">{result.stats.highIssues}</div>
                      <div className="text-sm text-gray-500">High</div>
                    </div>
                  </div>
                </div>

                {/* Results Tabs */}
                <div className="bg-white rounded-xl border border-gray-200 shadow-sm overflow-hidden">
                  <div className="border-b border-gray-200">
                    <nav className="flex space-x-8 px-6" aria-label="Tabs">
                      <button
                        onClick={() => setActiveTab('vulnerabilities')}
                        className={`py-4 px-1 border-b-2 font-medium text-sm ${
                          activeTab === 'vulnerabilities'
                            ? 'border-blue-500 text-blue-600'
                            : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                        }`}
                      >
                        <div className="flex items-center space-x-2">
                          <AlertTriangle className="w-4 h-4" />
                          <span>취약점</span>
                          <span className="bg-red-100 text-red-800 text-xs px-2 py-0.5 rounded-full">
                            {result.vulnerabilities.length}
                          </span>
                        </div>
                      </button>
                      <button
                        onClick={() => setActiveTab('fixed')}
                        className={`py-4 px-1 border-b-2 font-medium text-sm ${
                          activeTab === 'fixed'
                            ? 'border-blue-500 text-blue-600'
                            : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                        }`}
                      >
                        <div className="flex items-center space-x-2">
                          <CheckCircle className="w-4 h-4" />
                          <span>수정 코드</span>
                        </div>
                      </button>
                      <button
                        onClick={() => setActiveTab('guide')}
                        className={`py-4 px-1 border-b-2 font-medium text-sm ${
                          activeTab === 'guide'
                            ? 'border-blue-500 text-blue-600'
                            : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                        }`}
                      >
                        <div className="flex items-center space-x-2">
                          <FileText className="w-4 h-4" />
                          <span>가이드</span>
                        </div>
                      </button>
                    </nav>
                  </div>

                  <div className="p-6">
                    {activeTab === 'vulnerabilities' && (
                      <div className="space-y-4">
                        <div className="flex justify-between items-center">
                          <h3 className="text-lg font-medium text-gray-900">발견된 취약점</h3>
                          <button
                            onClick={downloadReport}
                            className="inline-flex items-center px-3 py-2 text-sm font-medium text-gray-700 bg-gray-100 hover:bg-gray-200 border border-gray-300 rounded-lg space-x-2 transition-colors"
                          >
                            <Download className="w-4 h-4" />
                            <span>보고서</span>
                          </button>
                        </div>
                        
                        <div className="space-y-3">
                          {result.vulnerabilities.map((vuln) => (
                            <div key={vuln.id} className="border border-gray-200 rounded-lg p-4 hover:shadow-sm transition-shadow">
                              <div className="flex items-start justify-between mb-2">
                                <div className="flex items-center space-x-2">
                                  <h4 className="font-medium text-gray-900">{vuln.type}</h4>
                                  <span className={`px-2 py-1 rounded text-xs font-medium border ${getSeverityColor(vuln.severity)}`}>
                                    {vuln.severity}
                                  </span>
                                </div>
                                <div className="text-sm text-gray-500">Line {vuln.line}</div>
                              </div>
                              <p className="text-gray-600 text-sm mb-2">{vuln.description}</p>
                              <div className="flex items-center justify-between">
                                <p className="text-blue-600 text-sm">💡 {vuln.recommendation}</p>
                                <span className="text-xs text-gray-400">{vuln.cwe}</span>
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}

                    {activeTab === 'fixed' && (
                      <div className="space-y-4">
                        <div className="flex justify-between items-center">
                          <h3 className="text-lg font-medium text-gray-900">수정된 코드</h3>
                          <button
                            onClick={() => copyToClipboard(result.fixedCode)}
                            className="inline-flex items-center px-3 py-2 text-sm font-medium text-gray-700 bg-gray-100 hover:bg-gray-200 border border-gray-300 rounded-lg space-x-2 transition-colors"
                          >
                            <Copy className="w-4 h-4" />
                            <span>복사</span>
                          </button>
                        </div>
                        <div className="bg-gray-50 border border-gray-200 rounded-lg p-4">
                          <pre className="text-sm text-gray-900 font-mono whitespace-pre-wrap overflow-x-auto">
                            {result.fixedCode}
                          </pre>
                        </div>
                      </div>
                    )}

                    {activeTab === 'guide' && (
                      <div className="space-y-4">
                        <h3 className="text-lg font-medium text-gray-900">{result.guide.title}</h3>
                        <div className="space-y-4">
                          {result.guide.sections.map((section, index) => (
                            <div key={index} className="border border-gray-200 rounded-lg p-4">
                              <div className="flex items-center justify-between mb-2">
                                <h4 className="font-medium text-gray-900">{section.title}</h4>
                                <span className={`px-2 py-1 rounded text-xs font-medium ${
                                  section.priority === 'Critical' ? 'text-red-600 bg-red-50' :
                                  section.priority === 'High' ? 'text-orange-600 bg-orange-50' :
                                  'text-yellow-600 bg-yellow-50'
                                }`}>
                                  {section.priority}
                                </span>
                              </div>
                              <p className="text-gray-600 text-sm">{section.content}</p>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </>
            ) : (
              <div className="bg-white rounded-xl border border-gray-200 shadow-sm p-12 text-center">
                <Shield className="w-16 h-16 text-gray-300 mx-auto mb-4" />
                <h3 className="text-lg font-medium text-gray-900 mb-2">분석을 시작하세요</h3>
                <p className="text-gray-500">코드를 입력하고 보안 취약점을 확인해보세요</p>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}